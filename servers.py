import os
import shutil
from datetime import datetime
import re
import json

# –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ config.json
try:
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª config.json –¥–ª—è —á—Ç–µ–Ω–∏—è (—Ä–µ–∂–∏–º "r")
    with open("config.json", "r", encoding="utf-8") as file:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é config (—ç—Ç–æ –±—É–¥–µ—Ç —Å–ª–æ–≤–∞—Ä—å)
        config = json.load(file)
    # –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

# –ï—Å–ª–∏ —Ñ–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫)
except FileNotFoundError:
    # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    print("‚ö†Ô∏è –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    # –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å config –≤—Ä—É—á–Ω—É—é ‚Äî —ç—Ç–æ "–∑–∞–ø–∞—Å–Ω–æ–π" –≤–∞—Ä–∏–∞–Ω—Ç
    config = {
        "default_cpu": 8,  # CPU –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        "default_ram": 16,  # RAM –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        "data_file": "../servers.json",  # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
        "app_name": "–£—á—ë—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤"  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    }

# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ–π)
servers = []


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º IP-–∞–¥—Ä–µ—Å–æ–º
def is_valid_ip(ip):
    # –®–∞–±–ª–æ–Ω: 4 —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 999, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ —Ç–æ—á–∫–∞–º–∏
    pattern = r'^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$'
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥ —à–∞–±–ª–æ–Ω
    match = re.match(pattern, ip)
    # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
    if not match:
        return False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 255
    return all(0 <= int(part) <= 255 for part in match.groups())


# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
def add_server():
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–µ
    name = input("–ò–º—è: ")
    ip = input("IP: ")
    role = input("–†–æ–ª—å (web, db, cache): ")
    status = input("–°—Ç–∞—Ç—É—Å (online/offline): ")
    standart = input("–û—Å—Ç–∞–≤–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é? (y/n): ")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    if standart == "y":
        # –ë–µ—Ä—ë–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        cpu = config["default_cpu"]
        ram = config["default_ram"]
    else:
        # –ò–Ω–∞—á–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é
        cpu = int(input("CPU: "))
        ram = int(input("RAM (–ì–ë): "))

    # –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–µ—Ä–µ
    server = {
        "name": name,
        "ip": ip,
        "role": role,
        "status": status,
        "cpu": cpu,
        "ram": ram
    }

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
    servers.append(server)
    # –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω
    print(f"‚úÖ –°–µ—Ä–≤–µ—Ä {name} –¥–æ–±–∞–≤–ª–µ–Ω!")


# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
def list_servers():
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî —Å–æ–æ–±—â–∞–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
    if not servers:
        print("–°–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    print("\n–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤:")
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –∏ –≤—ã–≤–æ–¥–∏–º –∏—Ö
    for server in servers:
        print(
            f"  {server['name']} | {server['ip']} | {server['role']} | {server['status']} | {server['cpu']} —è–¥–µ—Ä, {server['ram']} –ì–ë")
    print()


# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ IP
def find_server_by_ip(ip):
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
    for server in servers:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–∏ IP
        if is_valid_ip(ip):
            # –ï—Å–ª–∏ IP —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Äî –≤—ã–≤–æ–¥–∏–º —Å–µ—Ä–≤–µ—Ä –∏ –≤—ã—Ö–æ–¥–∏–º
            if server["ip"] == ip:
                print(f"–ù–∞–π–¥–µ–Ω —Å–µ—Ä–≤–µ—Ä: {server['name']} | {server['role']} | {server['status']}")
                return
        else:
            # –ï—Å–ª–∏ IP –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ‚Äî —Å–æ–æ–±—â–∞–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IP-–∞–¥—Ä–µ—Å–∞")
            return
    # –ï—Å–ª–∏ —Ü–∏–∫–ª –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –∞ —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
    print("‚ùå –°–µ—Ä–≤–µ—Ä —Å —Ç–∞–∫–∏–º IP –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏
def remove_server(name):
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã
    for server in servers:
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ –∏–º–µ–Ω–∏
        if server["name"] == name:
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
            servers.remove(server)
            print(f"‚úÖ –°–µ—Ä–≤–µ—Ä {name} —É–¥–∞–ª—ë–Ω.")
            return
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏
    print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ "online"
def online_servers():
    # –§–ª–∞–≥: –Ω–∞–π–¥–µ–Ω –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω online-—Å–µ—Ä–≤–µ—Ä
    found = False
    print("\n–°–µ—Ä–≤–µ—Ä—ã –≤ —Å—Ç–∞—Ç—É—Å–µ 'online':")
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
    for server in servers:
        if server["status"] == "online":
            print(f"  {server['name']} | {server['ip']} | {server['role']} | {server['cpu']} —è–¥–µ—Ä, {server['ram']} –ì–ë")
            found = True  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞—à–ª–∏
    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
    if not found:
        print("  ‚ùå –ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ 'online'")
    print()


# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á—ë—Ç–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ —Å—É–º–º–∞—Ä–Ω–æ–π RAM
def calculate_servers_and_ram():
    count = 0  # –°—á—ë—Ç—á–∏–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
    total_ram = 0  # –°—É–º–º–∞ RAM
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
    for server in servers:
        count += 1
        total_ram += int(server["ram"])
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {count}")
    print(f"–ö–æ–ª-–≤–æ RAM: {total_ram}")


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_servers():
    global servers
    path = config["data_file"]
    print(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑: {os.path.abspath(path)}")
    try:
        with open(path, "r", encoding="utf-8") as file:
            servers = json.load(file)
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑", path)
            print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:", servers)  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    except FileNotFoundError:
        print("‚ö†Ô∏è –§–∞–π–ª", path, "–Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        servers = []
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        servers = []


# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —Ñ–∞–π–ª
def save_servers():
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ (—Ä–µ–∂–∏–º "w")
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é –≤: {os.path.abspath(config['data_file'])}")
    with open(config["data_file"], "w", encoding="utf-8") as file:
        json.dump(servers, file, ensure_ascii=False, indent=4)
    print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ servers.json")


def create_backup():
    # –ü–∞–ø–∫–∞ –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    backup_dir = "backups"

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {backup_dir}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    backup_filename = f"backup_{timestamp}.json"
    backup_path = os.path.join(backup_dir, backup_filename)

    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
    try:
        shutil.copy("servers.json", backup_path)
        print(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")
    except FileNotFoundError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø: —Ñ–∞–π–ª servers.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")


if __name__ == "__main__":
    # –ó–ê–ì–†–£–ñ–ê–ï–ú –î–ê–ù–ù–´–ï –ü–†–ò –°–¢–ê–†–¢–ï –ü–†–û–ì–†–ê–ú–ú–´
    load_servers()

    # –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ü–†–û–ì–†–ê–ú–ú–´ ‚Äî –ú–ï–ù–Æ
    while True:
        # –í—ã–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        print(f"\n=== {config['app_name']} ===")
        print("1. –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
        print("2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã")
        print("3. –ù–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä –ø–æ IP")
        print("4. –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –ø–æ –∏–º–µ–Ω–∏")
        print("5. –ù–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä—ã online")
        print("6. –ù–∞–π—Ç–∏ –∫–æ–ª-–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ —Å—É–º–º—É RAM")
        print("7. –í—ã—Ö–æ–¥")

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —á—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        if choice == "1":
            add_server()
        elif choice == "2":
            list_servers()
        elif choice == "3":
            ip = input("–í–≤–µ–¥–∏—Ç–µ IP: ")
            find_server_by_ip(ip)
        elif choice == "4":
            name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞: ")
            remove_server(name)
        elif choice == "5":
            online_servers()
        elif choice == "6":
            calculate_servers_and_ram()
        elif choice == "7":
            save_servers()
            create_backup()  # –î–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
            print("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
            break
        else:
            print("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
